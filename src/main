""" List of ciphers to support:
Atbash Cipher
ROT13 Cipher
Caesar Cipher
Affine Cipher
Rail-fence Cipher
Baconian Cipher
Polybius Square Cipher
Simple Substitution Cipher
Codes and Nomenclators Cipher
Columnar Transposition Cipher
Autokey Cipher
Beaufort Cipher
Porta Cipher
Running Key Cipher
VigenÃ¨re and Gronsfeld Cipher
Homophonic Substitution Cipher
Four-Square Cipher
Hill Cipher
Playfair Cipher
ADFGVX Cipher
ADFGX Cipher
Bifid Cipher
Straddle Checkerboard Cipher
Trifid Cipher
Base64 Cipher
Fractionated Morse Cipher

Mecanical: Enigma Cipher, Lorenz Cipher
"""
def is_upper(c):
    return ord(c) > 64 and ord(c) < 91

def is_lower(c):
    return ord(c) > 96 and ord(c) < 122

def at_bash(plaintext):
    cipher_array = []
    for i in range(len(plaintext)):
        c = plaintext[i]
        if is_upper(c):
            cipher_array += [chr((-1 * (ord(c) - 64)) % 26 + 65)]
        elif is_lower(c):
            cipher_array += [chr((-1 * (ord(c) - 96)) % 26 + 97)]
        else:
            cipher_array += [c]
    return "".join(cipher_array)
        


def rot13(plaintext):
    cipher_array = []
    for i in range(len(plaintext)):
        c = plaintext[i]
        if is_upper(c):
            cipher_array += [chr((13 + (ord(c) - 65)) % 26 + 65)]
        elif is_lower(c):
            cipher_array += [chr((13 + (ord(c) - 97)) % 26 + 97)]
        else:
            cipher_array += [c]
    return "".join(cipher_array)

plaintext = "I am heading over now!"
print(at_bash(plaintext))
print(rot13(plaintext))
